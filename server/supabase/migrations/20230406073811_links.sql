create table "public"."links" (
    "id" bigint generated by default as identity not null,
    "link" text,
    "owner" uuid not null,
    "tag" text
);


alter table "public"."links" enable row level security;

CREATE UNIQUE INDEX links_pkey ON public.links USING btree (id);

alter table "public"."links" add constraint "links_pkey" PRIMARY KEY using index "links_pkey";

alter table "public"."links" add constraint "public_links_owner_fkey" FOREIGN KEY (owner) REFERENCES auth.users(id) not valid;

alter table "public"."links" validate constraint "public_links_owner_fkey";

grant delete on table "public"."links" to "anon";

grant insert on table "public"."links" to "anon";

grant references on table "public"."links" to "anon";

grant select on table "public"."links" to "anon";

grant trigger on table "public"."links" to "anon";

grant truncate on table "public"."links" to "anon";

grant update on table "public"."links" to "anon";

grant delete on table "public"."links" to "authenticated";

grant insert on table "public"."links" to "authenticated";

grant references on table "public"."links" to "authenticated";

grant select on table "public"."links" to "authenticated";

grant trigger on table "public"."links" to "authenticated";

grant truncate on table "public"."links" to "authenticated";

grant update on table "public"."links" to "authenticated";

grant delete on table "public"."links" to "service_role";

grant insert on table "public"."links" to "service_role";

grant references on table "public"."links" to "service_role";

grant select on table "public"."links" to "service_role";

grant trigger on table "public"."links" to "service_role";

grant truncate on table "public"."links" to "service_role";

grant update on table "public"."links" to "service_role";

create policy "Only authenticated users can delete links"
on "public"."links"
as permissive
for delete
to authenticated
using ((auth.uid() = owner));


create policy "Only authenticated users can insert links"
on "public"."links"
as permissive
for insert
to authenticated
with check ((auth.uid() = owner));


create policy "Only authenticated users can query links"
on "public"."links"
as permissive
for select
to authenticated
using ((auth.uid() = owner));


create policy "Only authenticated users can update links"
on "public"."links"
as permissive
for update
to authenticated
using ((auth.uid() = owner))
with check ((auth.uid() = owner));



